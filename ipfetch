#!/usr/bin/bash
ipfetch() {
OLD_PATH=$PATH
PATH=/usr/bin
CONFIG_DIR=$HOME/.config
/bin/mkdir -p $CONFIG_DIR
TOKEN_FILE=$CONFIG_DIR/ipinfo_token
if [[ ! -f "$TOKEN_FILE" ]]; then
	/bin/echo "token file does not exist, please create it at $TOKEN_FILE"
	builtin return
fi
TOKEN="$(cat "$TOKEN_FILE")"
if [[ -z "$TOKEN" ]]; then
	/bin/echo "token file is blank, please create it at $TOKEN_FILE"
	builtin return
fi
if [[ ! -z "$1" ]]; then
	if [[ "$1" == "--help" ]]; then /bin/echo "usage: ipfetch <ip>"; builtin return; fi
	IP_REGEX="^(((\:\:)?(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-6])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-6]))|(((([a-f0-9]{1,4}\:\:?)|(\:\:))([a-f0-9]{1,4}){1,7})(\:\:(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-6])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-6]))?))$"
	if /bin/printf "%s" "$1" | /bin/grep -Ez "$IP_REGEX" > /dev/null; then
		IP_="$1"
	else
		/bin/echo "not a valid IP address"
		builtin return
	fi
fi
#DATA="$(/bin/curl "https://ipinfo.io/$IP_?token=$TOKEN")"
#printf "%s" "$DATA" > cache.json
DATA="$(/bin/cat cache.json)"
_BOGON="$(/bin/printf "%s" "$DATA" | /bin/jq -r .bogon)"
_IP="$(/bin/printf "%s" "$DATA" | /bin/jq -r .ip)"
if [[ "$_BOGON" == "true" ]]; then
	/bin/echo "IP address $_IP doesn't exist"
	builtin return
fi
_HOSTNAME="$(     /bin/printf "%s" "$DATA" | /bin/jq -r .hostname)"
_ANYCAST="$(      /bin/printf "%s" "$DATA" | /bin/jq -r .anycast)"
_CITY="$(         /bin/printf "%s" "$DATA" | /bin/jq -r .city)"
_REGION="$(       /bin/printf "%s" "$DATA" | /bin/jq -r .region)"
_COUNTRY="$(      /bin/printf "%s" "$DATA" | /bin/jq -r .country)"
_LOCATION="$(     /bin/printf "%s" "$DATA" | /bin/jq -r .loc)"
_ORGANIZATION="$( /bin/printf "%s" "$DATA" | /bin/jq -r .org)"
_POSTAL="$(       /bin/printf "%s" "$DATA" | /bin/jq -r .postal)"
_TIMEZONE="$(     /bin/printf "%s" "$DATA" | /bin/jq -r .timezone)"
/bin/mkdir -p $HOME/.cache/flags/
builtin pushd $HOME/.cache/flags/>/dev/null
if [[ ! -f "${_COUNTRY}.png" ]]; then
	/bin/rm -vf -- "${_COUNTRY}.png"
	/bin/curl -o "${_COUNTRY}.png" -- \
		"https://flagcdn.com/w1280/$(/bin/printf "%s" "${_COUNTRY}"|/bin/dd status=none conv=lcase).png"
fi
FLAG_HEIGHT_=11
FLAG_WIDTH_=$((${FLAG_HEIGHT_}*4))
FLAG_HEIGHT_OFFSET_=1
/bin/cat -- "${_COUNTRY}.png" | /bin/timg - -CIg${FLAG_WIDTH_}x${FLAG_HEIGHT_}
builtin popd>/dev/null
LINE_=$FLAG_HEIGHT_
printf "\x1b[%sA" "$((${FLAG_HEIGHT_}-${FLAG_HEIGHT_OFFSET_}))"
print_line() {
	if [[ ! -z "$1" || ! -z "$2" ]]; then
		if [[ -z "$1" ]]; then
			/bin/printf "\x1b[%sC %s%s\n" "$FLAG_WIDTH_" "$COLOR_VALUE_" "$2"
		else
			/bin/printf "\x1b[%sC %s%s: %s%s\n" "$FLAG_WIDTH_" "$COLOR_KEY_" "$1" "$COLOR_VALUE_" "$2"
		fi
		if [[ "$LINE_" != "0" ]]; then
			LINE_=$((${LINE_}-1))
		fi
	fi
}
print_line "IP address"   "${_IP}"
print_line "Host name"    "${_HOSTNAME}"
print_line "Anycast"      "${_ANYCAST}"
print_line "City"         "${_CITY}"
print_line "Region"       "${_REGION}"
print_line "Country"      "${_COUNTRY}"
print_line "Location"     "${_LOCATION}"
print_line "Organization" "${_ORGANIZATION}"
print_line "Postal"       "${_POSTAL}"
print_line "Timezone"     "${_TIMEZONE}"
printf "\x1b[%sB" "$LINE_"
builtin unset -f print_line
builtin unset -v LINES
PATH=$OLD_PATH
}
ipfetch $*
