#!/usr/bin/bash
ipfetch() {
CONFIG_DIR=$HOME/.config
CACHE_DIR=$HOME/.cache
mkdir -p $CONFIG_DIR
TOKEN_FILE=$CONFIG_DIR/ipinfo_token
if [[ ! -f "$TOKEN_FILE" ]]; then
	printf "token file does not exist, please create it at %s" "$TOKEN_FILE"
	return
fi
TOKEN="$(cat "$TOKEN_FILE")"
if [[ -z "$TOKEN" ]]; then
	printf "token file is blank, please create it at %s" "$TOKEN_FILE"
	return
fi
if [[ ! -z "$1" ]]; then
	if [[ "$1" == "--help" ]]; then printf "%s" "usage: ipfetch <ip>"; return; fi
	IP_REGEX="^(((\:\:)?(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-6])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-6]))|(((([a-f0-9]{1,4}\:\:?)|(\:\:))([a-f0-9]{1,4}){1,7})(\:\:(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-6])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-6]))?))$"
	if printf "%s" "$1" | grep -Ez "$IP_REGEX" > /dev/null; then
		IP_="$1"
	else
		printf "not a valid IP address\n"
		return
	fi
fi
mkdir -p $CACHE_DIR/ipfetch/
pushd $CACHE_DIR/ipfetch/>/dev/null
IP_FILE_=$IP_
if [[ -z "$IP_" ]]; then IP_FILE_=_; fi
USE_CACHE_=no
if [[ -f "./$IP_FILE_.res" && -f "./$IP_FILE_.status" ]]; then
	if [[ "$(($(stat -c%Y -- "./$IP_FILE_.status")+3600))" -gt "$(date +%s)" ]]; then
		USE_CACHE_=yes
	fi
fi
if [[ "$USE_CACHE_" == "yes" ]]; then
	STATUS="$(cat "./$IP_FILE_.status")"
	DATA="$(cat "./$IP_FILE_.res")"
else
	rm -f -- "./$IP_FILE_.res" "./$IP_FILE_.status"
	STATUS="$(curl --no-progress-meter -w "%{http_code}\n" -o "./$IP_FILE_.res" "https://ipinfo.io/$IP_?token=$TOKEN")"
	DATA="$(cat -- "./$IP_FILE_.res")"
	printf "%s" "$STATUS" > "./$IP_FILE_.status"
fi
if [[ "$STATUS" -lt 200 || "$STATUS" -ge 300 ]]; then
	printf "status code %s not 200\n" "$STATUS"
	return
fi
_BOGON="$(printf "%s" "$DATA" | jq -r .bogon)"
_IP="$(printf "%s" "$DATA" | jq -r .ip)"
if [[ "$_BOGON" == "true" ]]; then
	printf "IP address %s doesn't exist\n" "$_IP"
	return
fi
_HOSTNAME="$(     printf "%s" "$DATA" | jq -r .hostname)"
_ANYCAST="$(      printf "%s" "$DATA" | jq -r .anycast)"
_CITY="$(         printf "%s" "$DATA" | jq -r .city)"
_REGION="$(       printf "%s" "$DATA" | jq -r .region)"
_COUNTRY="$(      printf "%s" "$DATA" | jq -r .country)"
_LOCATION="$(     printf "%s" "$DATA" | jq -r .loc)"
_ORGANIZATION="$( printf "%s" "$DATA" | jq -r .org)"
_POSTAL="$(       printf "%s" "$DATA" | jq -r .postal)"
_TIMEZONE="$(     printf "%s" "$DATA" | jq -r .timezone)"
FLAG_HEIGHT_=11
FLAG_WIDTH_=$((${FLAG_HEIGHT_}*4))
FLAG_HEIGHT_OFFSET_=1
if [[ ! -f "${_COUNTRY}.png" ]]; then
	rm -vf -- "${_COUNTRY}.png"
	curl --no-progress-meter -o "${_COUNTRY}.png" -- \
"https://flagcdn.com/w1280/$(printf "%s" "${_COUNTRY}"|dd status=none conv=lcase).png"
fi
COLORS_MAGICK_="$(magick convert "${_COUNTRY}.png" -format %c histogram:info:-|sort -n|sed "s/.*: (//;s/).*//"|cut "-sd," "-f1-3"|grep -v "255,255,255"|tail -1)"
COLORS_="$(python -c "import colorsys; a = colorsys.rgb_to_hsv(${COLORS_MAGICK_});"\
"light=colorsys.hsv_to_rgb(a[0],a[1],255);dark=colorsys.hsv_to_rgb(a[0],a[1],min(200,max(160,a[2])));"\
"print(int(light[0]),int(light[1]),int(light[2]));print(int(dark[0]),int(dark[1]),int(dark[2]))"|sed "s/^(//;s/)$//;s/ /;/g")"
COLOR_KEY_=$'\x1b'"[38;2;$(printf "%s" "$COLORS_"|cut -sd$'\n' -f1)m"
COLOR_COLON_=$'\x1b'"[38;2;$(printf "%s" "$COLORS_"|cut -sd$'\n' -f2)m"
LINE_=$FLAG_HEIGHT_
clear
printf "\x1b[H\x1b[2J\x1b[s"
print_line() {
	if [[ ! -z "$1" && ! -z "$2" && "$2" != "null" ]]; then
		printf "\x1b[%sC %s%s\x1b[0m%s:\x1b[0m %s%s\x1b[0m\n" "$FLAG_WIDTH_" "$COLOR_KEY_" "$1" "$COLOR_COLON_" "$COLOR_VALUE_" "$2"
		if [[ "$LINE_" != "0" ]]; then
			LINE_=$((${LINE_}-1))
		fi
	fi
}
print_line "IP address"   "${_IP}"
print_line "Host name"    "${_HOSTNAME}"
print_line "Anycast"      "${_ANYCAST}"
print_line "City"         "${_CITY}"
print_line "Region"       "${_REGION}"
print_line "Country"      "${_COUNTRY}"
print_line "Location"     "${_LOCATION}"
print_line "Organization" "${_ORGANIZATION}"
print_line "Postal"       "${_POSTAL}"
print_line "Timezone"     "${_TIMEZONE}"
printf "\x1b[u"
cat -- "${_COUNTRY}.png" | timg - -CIg${FLAG_WIDTH_}x${FLAG_HEIGHT_}
popd>/dev/null
unset -f print_line
unset -v LINES
}
ipfetch $*
